{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please provide the arguments correctly: \n",
      "Sample Script Execution:\n",
      "> python process_data.py disaster_messages.csv disaster_categories.csv disaster_response_db.db \n",
      "Arguments Description: \n",
      "1) Path to the CSV file containing messages (e.g. disaster_messages.csv)\n",
      "2) Path to the CSV file containing categories (e.g. disaster_categories.csv)\n",
      "3) Path to SQLite destination database (e.g. disaster_response_db.db)\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Preprocessing of Data\n",
    "Project: Disaster Response Pipeline (Udacity - Data Science Nanodegree)\n",
    "Sample Script Syntax:\n",
    "> python process_data.py <path to messages csv file> <path to categories csv file> <path to sqllite  destination db>\n",
    "Sample Script Execution:\n",
    "> python process_data.py disaster_messages.csv disaster_categories.csv disaster_response_db.db\n",
    "Arguments Description:\n",
    "    1) Path to the CSV file containing messages (e.g. disaster_messages.csv)\n",
    "    2) Path to the CSV file containing categories (e.g. disaster_categories.csv)\n",
    "    3) Path to SQLite destination database (e.g. disaster_response_db.db)\n",
    "\"\"\"\n",
    "\n",
    "# Import all the relevant libraries\n",
    "import sys\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    " \n",
    "def load_messages_with_categories(messages_filepath, categories_filepath):\n",
    "    \"\"\"\n",
    "    Load Messages Data with Categories Function\n",
    "    \n",
    "    Arguments:\n",
    "        messages_filepath -> Path to the CSV file containing messages\n",
    "        categories_filepath -> Path to the CSV file containing categories\n",
    "    Output:\n",
    "        df -> Combined data containing messages and categories\n",
    "    \"\"\"\n",
    "    \n",
    "    messages = pd.read_csv(messages_filepath)\n",
    "    categories = pd.read_csv(categories_filepath)\n",
    "    df = pd.merge(messages,categories,on='id')\n",
    "    return df \n",
    "\n",
    "def clean_categories_data(df):\n",
    "    \"\"\"\n",
    "    Clean Categories Data Function\n",
    "    \n",
    "    Arguments:\n",
    "        df -> Combined data containing messages and categories\n",
    "    Outputs:\n",
    "        df -> Combined data containing messages and categories with categories cleaned up\n",
    "    \"\"\"\n",
    "    \n",
    "    # Split the categories\n",
    "    categories = df['categories'].str.split(pat=';',expand=True)\n",
    "    \n",
    "    #Fix the categories columns name\n",
    "    row = categories.iloc[[1]]\n",
    "    category_colnames = [category_name.split('-')[0] for category_name in row.values[0]]\n",
    "    categories.columns = category_colnames\n",
    "    \n",
    "    for column in categories:\n",
    "        categories[column] = categories[column].str[-1]\n",
    "        categories[column] = categories[column].astype(np.int)\n",
    "    \n",
    "    df = df.drop('categories',axis=1)\n",
    "    df = pd.concat([df,categories],axis=1)\n",
    "    df = df.drop_duplicates()\n",
    "    \n",
    "    return df\n",
    "\n",
    "def save_data_to_db(df, database_filename):\n",
    "    \"\"\"\n",
    "    Save Data to SQLite Database Function\n",
    "    \n",
    "    Arguments:\n",
    "        df -> Combined data containing messages and categories with categories cleaned up\n",
    "        database_filename -> Path to SQLite destination database\n",
    "    \"\"\"\n",
    "    \n",
    "    engine = create_engine('sqlite:///'+ database_filename)\n",
    "    table_name = database_filename.replace(\".db\",\"\") + \"_table\"\n",
    "    df.to_sql(table_name, engine, index=False, if_exists='replace')\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Main function which will kick off the data processing functions. There are three primary actions taken by this function:\n",
    "        1) Load Messages Data with Categories\n",
    "        2) Clean Categories Data\n",
    "        3) Save Data to SQLite Database\n",
    "    \"\"\"\n",
    "    \n",
    "    # Print the system arguments\n",
    "    # print(sys.argv)\n",
    "    \n",
    "    # Execute the ETL pipeline if the count of arguments is matching to 4\n",
    "    if len(sys.argv) == 4:\n",
    "\n",
    "        messages_filepath, categories_filepath, database_filepath = sys.argv[1:] # Extract the parameters in relevant variable\n",
    "\n",
    "        print('Loading messages data from {} ...\\nLoading categories data from {} ...'\n",
    "              .format(messages_filepath, categories_filepath))\n",
    "        \n",
    "        df = load_messages_with_categories(messages_filepath, categories_filepath)\n",
    "\n",
    "        print('Cleaning categories data ...')\n",
    "        df = clean_categories_data(df)\n",
    "        \n",
    "        print('Saving data to SQLite DB : {}'.format(database_filepath))\n",
    "        save_data_to_db(df, database_filepath)\n",
    "        \n",
    "        print('Cleaned data has been saved to database!')\n",
    "    \n",
    "    else: # Print the help message so that user can execute the script with correct parameters\n",
    "        print(\"Please provide the arguments correctly: \\nSample Script Execution:\\n\\\n",
    "> python process_data.py disaster_messages.csv disaster_categories.csv disaster_response_db.db \\n\\\n",
    "Arguments Description: \\n\\\n",
    "1) Path to the CSV file containing messages (e.g. disaster_messages.csv)\\n\\\n",
    "2) Path to the CSV file containing categories (e.g. disaster_categories.csv)\\n\\\n",
    "3) Path to SQLite destination database (e.g. disaster_response_db.db)\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
