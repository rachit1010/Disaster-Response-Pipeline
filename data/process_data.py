{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please provide the parameters correctly: \n",
      "Sample Script Execution:\n",
      "> Please provide the paths of messages and categories files \n",
      "Arguments Description: \n",
      "1) Path to the CSV file containing messages (e.g. disaster_messages.csv)\n",
      "2) Path to the CSV file containing categories (e.g. disaster_categories.csv)\n",
      "3) Path to SQLite destination database (e.g. disaster_response_db.db)\n"
     ]
    }
   ],
   "source": [
    "# Import all the relevant libraries\n",
    "import sys\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    " \n",
    "def load_data(messages_filepath, categories_filepath):\n",
    "    \"\"\"\n",
    "    Load, merge messages and categories datasets\n",
    "    \n",
    "    inputs or Arguments:\n",
    "    messages_filepath -> Filepath for csv file containing messages dataset.\n",
    "    categories_filepath -> Filepath for csv file containing categories dataset.\n",
    "    \n",
    "     \n",
    "    Output:\n",
    "        df -> Combined data containing messages and categories\n",
    "    \"\"\"\n",
    "    #load messages dataset\n",
    "    messages = pd.read_csv(messages_filepath)\n",
    "    \n",
    "    #load categories dataset\n",
    "    categories = pd.read_csv(categories_filepath)\n",
    "    \n",
    "    #Merge messages and categories dataset\n",
    "    df = pd.merge(messages,categories,on='id')\n",
    "    return df \n",
    "\n",
    "def clean_categories_data(df):\n",
    "    \"\"\"\n",
    "    Cleaning Categories Data Function and removing duplicates\n",
    "    \n",
    "    Arguments:\n",
    "        df -> Dataframe, containing merged data from messages and categories dataset\n",
    "    Outputs:\n",
    "        df -> Cleaned data which was provided in df dataframe as Arguments or input\n",
    "    \"\"\"\n",
    "    \n",
    "    # Split the categories and create dataframe for individual category\n",
    "    categories = df['categories'].str.split(';',expand=True)\n",
    "    \n",
    "    #Fix the categories columns name\n",
    "    row = categories.iloc[[1]]\n",
    "    \n",
    "    category_colnames = [category_name.split('-')[0] for category_name in row.values[0]]\n",
    "    \n",
    "    #Rename columns to categories\n",
    "    categories.columns = category_colnames\n",
    "    \n",
    "    for column in categories:\n",
    "        # Setting value to last character of string\n",
    "        categories[column] = categories[column].str[-1]\n",
    "        #Typecasting\n",
    "        categories[column] = categories[column].astype(np.int)\n",
    "    \n",
    "    #Drop the categories from dataframe\n",
    "    df = df.drop('categories',axis=1)\n",
    "    \n",
    "    #Concatenate the dataframe with new categories\n",
    "    df = pd.concat([df,categories],axis=1)\n",
    "    \n",
    "    #Drop the duplicates\n",
    "    df = df.drop_duplicates()\n",
    "    \n",
    "    # Remove rows with a  value of 2 from df\n",
    "    df = df[df['related'] != 2]\n",
    "    \n",
    "    return df\n",
    "\n",
    "def save_data(df, database_filename):\n",
    "    \"\"\"\n",
    "    Save Data into SQLite Database\n",
    "    \n",
    "    Arguments:\n",
    "        df: Contains cleaned data from messages and categories dataset\n",
    "        database_filename: Filename for destination database\n",
    "        \n",
    "    Output: None    \n",
    "    \"\"\"\n",
    "    \n",
    "    engine = create_engine('sqlite:///'+ database_filename)\n",
    "    table_name = database_filename.replace(\".db\",\"\") + \"_table\"\n",
    "    \n",
    "    #removes table from database if same name file of database do exist\n",
    "    df.to_sql(table_name, engine, index=False, if_exists='replace')\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Main function performs three primary function here:\n",
    "        1) Load Messages Data along with Categories\n",
    "        2) Clean Categories Data\n",
    "        3) Save Data to SQLite Database\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    # Execute the ETL pipeline if the count of arguments is matching to 4\n",
    "    if len(sys.argv) == 4:\n",
    "\n",
    "        # Extract the parameters in relevant variable\n",
    "        messages_filepath, categories_filepath, database_filepath = sys.argv[1:]\n",
    "\n",
    "        print('Loading messages data from {} ...\\nLoading categories data from {} ...'\n",
    "              .format(messages_filepath, categories_filepath))\n",
    "        \n",
    "        df = load_data(messages_filepath, categories_filepath)\n",
    "\n",
    "        print('Cleaning categories data..')\n",
    "        df = clean_categories_data(df)\n",
    "        \n",
    "        print('Saving data to DB : {}'.format(database_filepath))\n",
    "        save_data(df, database_filepath)\n",
    "        \n",
    "        print('Cleaned data saved to database!')\n",
    "    \n",
    "    else: # Display the message if user provided some undesired input or parameters:\n",
    "        print(\"Please provide the parameters correctly: \\nSample Script Execution:\\n\\\n",
    "> Please provide the paths of messages and categories files \\n\\\n",
    "Arguments Description: \\n\\\n",
    "1) Path to the CSV file containing messages (e.g. disaster_messages.csv)\\n\\\n",
    "2) Path to the CSV file containing categories (e.g. disaster_categories.csv)\\n\\\n",
    "3) Path to SQLite destination database (e.g. disaster_response_db.db)\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
